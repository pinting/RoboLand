"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Processor {
    GetInner(input) {
        if (input.indexOf("(") < 0)
            return null;
        let start = 0;
        let brackets = 0;
        for (let i = 0; i < input.length; i++) {
            switch (input[i]) {
                case "(":
                    if (brackets++ == 0)
                        start = i;
                    break;
                case ")":
                    if (brackets-- == 1)
                        return [start, i];
                    break;
            }
        }
        return null;
    }
    GetBlock(input) {
        const get = (input, a, b) => {
            let ap = input.indexOf(a);
            let bp = input.indexOf(b);
            if (ap < 0 && bp < 0)
                return input;
            if (ap < 0)
                ap = input.length;
            if (bp < 0)
                bp = input.length;
            let first = ap < bp ? ap : bp;
            let type = ap < bp ? a : b;
            return {
                left: input.substring(0, first),
                right: input.substring(first + 1, input.length),
                method: type
            };
        };
        if (!input.method) {
            input = get(input, "+", "-");
            if (!input.method)
                input = get(input, "*", "/");
        }
        return input;
    }
    ExtractBlock(block) {
        block = this.GetBlock(block);
        if (!block.method)
            return block;
        block.left = this.ExtractBlock(block.left);
        block.right = this.ExtractBlock(block.right);
        return block;
    }
    CalculateBlock(block) {
        if (!block.method) {
            const result = block.length == 0 ? 0 : parseFloat(block);
            if (result == NaN)
                throw new Error("Not a number!");
            return result;
        }
        switch (block.method) {
            case "+":
                return this.CalculateBlock(block.left) + this.CalculateBlock(block.right);
            case "-":
                return this.CalculateBlock(block.left) - this.CalculateBlock(block.right);
            case "*":
                return this.CalculateBlock(block.left) * this.CalculateBlock(block.right);
            case "/":
                return this.CalculateBlock(block.left) / this.CalculateBlock(block.right);
        }
    }
    Calculate(input) {
        let range;
        while ((range = this.GetInner(input)) != null) {
            const result = this.Calculate(input.substring(range[0] + 1, range[1]));
            input = input.substring(0, range[0]) + result + input.substring(range[1] + 1, input.length);
        }
        let block = this.ExtractBlock(input);
        return this.CalculateBlock(block);
    }
    ResolveFunctions(input) {
        const pattern = /[A-Za-z][A-Za-z0-9]*\(/;
        let start = null;
        while ((start = input.match(pattern)) != null) {
            const range = this.GetInner(input.substr(start.index)).map(p => p + start.index);
            const name = input.substring(start.index, range[0]);
            const args = [];
            const resolved = [];
            let last = range[0] + 1;
            let brackets = 0;
            for (let i = range[0] + 1; i <= range[1]; i++) {
                const c = input[i];
                if (c == "(") {
                    brackets++;
                }
                else if ((c == ")" && --brackets == -1) || (c == "," && brackets == 0)) {
                    args.push(input.substring(last, i).trim());
                    last = i + 1;
                }
            }
            args.forEach(arg => resolved.push(this.Solve(arg)));
            const result = parseFloat(this.Context[name].apply(this.Context, resolved));
            if (result == NaN)
                throw new Error("Not a number!");
            input = input.substring(0, start.index) + result + input.substring(range[1] + 1, input.length);
        }
        return input;
    }
    ResolveVariables(input) {
        const pattern = /[A-Za-z][A-Za-z0-9]*/;
        let start = null;
        while ((start = input.match(pattern)) != null) {
            const result = parseFloat(this.Context[start[0]]);
            if (result == NaN)
                throw new Error("Not a number!");
            input = input.substring(0, start.index) + result + input.substring(start.index + start[0].length, input.length);
        }
        return input;
    }
    Solve(input) {
        return this.Calculate(this.ResolveVariables(this.ResolveFunctions(input)));
    }
}
exports.Processor = Processor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
