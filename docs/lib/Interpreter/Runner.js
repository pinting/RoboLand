"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Adapter_1 = require("./Adapter");
const Processor_1 = require("./Processor");
const Parser_1 = require("./Parser");
class Runner {
    constructor(robot) {
        this.speed = 300;
        this.adapter = new Adapter_1.Adapter(robot);
        this.processor = new Processor_1.Processor;
        this.parser = new Parser_1.Parser;
    }
    Run(code) {
        this.Stop();
        this.parser.Parse(code);
        this.processor.Context = {
            move: this.adapter.move.bind(this.adapter),
            test: this.adapter.test.bind(this.adapter),
            attack: this.adapter.attack.bind(this.adapter)
        };
        this.counter = 0;
        this.interval = setInterval(() => this.ExecuteLine(), this.speed);
    }
    Stop() {
        if (this.interval) {
            clearInterval(this.interval);
        }
    }
    ExecuteLine() {
        if (this.counter < 0 && this.counter >= this.parser.Code.length) {
            this.Stop();
            return;
        }
        let line = this.parser.Code[this.counter++];
        try {
            switch (line[0]) {
                case "LABEL":
                    break;
                case "GOTO":
                    this.ExecuteGoto(line);
                    break;
                case "CALL":
                    this.ExecuteCall(line);
                    break;
                case "SET":
                    this.ExecuteSet(line);
                    break;
            }
        }
        catch (e) {
            this.Stop();
        }
    }
    ExecuteGoto(parameters) {
        const set = () => this.counter = this.parser.Labels.hasOwnProperty(parameters[1]) ? this.parser.Labels[parameters[1]] : -1;
        if (parameters.length == 2) {
            set();
        }
        else if (parameters.length >= 4) {
            let condition = parameters.slice(3).join(" ");
            if (this.processor.Solve(condition) != 0)
                set();
        }
        else {
            throw new Error("Invalid GOTO");
        }
    }
    ExecuteCall(parameters) {
        if (parameters.length < 2) {
            throw new Error("Invalid CALL");
        }
        let call = parameters.slice(1).join(" ");
        this.processor.Solve(call);
    }
    ExecuteSet(parameters) {
        if (parameters.length < 3) {
            throw new Error("Invalid SET");
        }
        let call = parameters.slice(2).join(" ");
        this.processor.Context[parameters[1]] = this.processor.Solve(call);
    }
}
exports.Runner = Runner;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
