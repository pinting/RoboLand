"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Parser {
    Parse(lines) {
        this.Code = [];
        this.Labels = {};
        lines.split("\n").forEach(line => this.ParseLine(line));
    }
    ParseLine(line) {
        if (line[0] == "#") {
            return;
        }
        let parameters = line.split(" ");
        switch (parameters[0]) {
            case "LABEL":
                this.ParseLabel(parameters);
                break;
            case "GOTO":
            case "CALL":
            case "SET":
                this.ParseCode(parameters);
                break;
        }
    }
    ParseLabel(parameters) {
        if (parameters.length != 2) {
            throw new Error("Invalid LABEL");
        }
        this.Labels[parameters[1]] = this.Code.length;
    }
    ParseCode(parameters) {
        this.Code.push(parameters);
    }
}
exports.Parser = Parser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93d3cvbGliL0ludGVycHJldGVyL1BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBO0lBU1csS0FBSyxDQUFDLEtBQWE7UUFFdEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVqQixLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFNTyxTQUFTLENBQUMsSUFBWTtRQUcxQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQ2xCLENBQUM7WUFDRyxNQUFNLENBQUM7UUFDWCxDQUFDO1FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQyxNQUFNLENBQUEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckIsQ0FBQztZQUNHLEtBQUssT0FBTztnQkFDUixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUM1QixLQUFLLENBQUM7WUFDVixLQUFLLE1BQU0sQ0FBQztZQUNaLEtBQUssTUFBTSxDQUFDO1lBQ1osS0FBSyxLQUFLO2dCQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzNCLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDO0lBTU8sVUFBVSxDQUFDLFVBQW9CO1FBRW5DLEVBQUUsQ0FBQSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQzFCLENBQUM7WUFDRyxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2xELENBQUM7SUFNTyxTQUFTLENBQUMsVUFBb0I7UUFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBbEVELHdCQWtFQyIsImZpbGUiOiJ3d3cvbGliL0ludGVycHJldGVyL1BhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElSb2JvdCB9IGZyb20gJy4vLi4vRWxlbWVudC9Sb2JvdC9JUm9ib3QnO1xyXG5pbXBvcnQgeyBBZGFwdGVyIH0gZnJvbSAnLi9BZGFwdGVyJztcclxuaW1wb3J0IHsgUHJvY2Vzc29yIH0gZnJvbSAnLi9Qcm9jZXNzb3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnNlclxyXG57XHJcbiAgICBwdWJsaWMgQ29kZTogc3RyaW5nW11bXTtcclxuICAgIHB1YmxpYyBMYWJlbHM6IHsgW2lkOiBzdHJpbmddIDogbnVtYmVyOyB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgdGhlIGdpdmVuIGNvZGUuXHJcbiAgICAgKiBAcGFyYW0gbGluZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIFBhcnNlKGxpbmVzOiBzdHJpbmcpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5Db2RlID0gW107XHJcbiAgICAgICAgdGhpcy5MYWJlbHMgPSB7fTtcclxuXHJcbiAgICAgICAgbGluZXMuc3BsaXQoXCJcXG5cIikuZm9yRWFjaChsaW5lID0+IHRoaXMuUGFyc2VMaW5lKGxpbmUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSBnaXZlbiBsaW5lLlxyXG4gICAgICogQHBhcmFtIGxpbmVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBQYXJzZUxpbmUobGluZTogc3RyaW5nKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIC8vIFNraXAgdGhlIGxpbmUgaWYgaXQgaXMgY29tbWVudFxyXG4gICAgICAgIGlmKGxpbmVbMF0gPT0gXCIjXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcGFyYW1ldGVycyA9IGxpbmUuc3BsaXQoXCIgXCIpO1xyXG5cclxuICAgICAgICBzd2l0Y2gocGFyYW1ldGVyc1swXSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJMQUJFTFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5QYXJzZUxhYmVsKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJHT1RPXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJDQUxMXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJTRVRcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuUGFyc2VDb2RlKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgYSBMQUJFTCBjb21tYW5kLlxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgUGFyc2VMYWJlbChwYXJhbWV0ZXJzOiBzdHJpbmdbXSk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICBpZihwYXJhbWV0ZXJzLmxlbmd0aCAhPSAyKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgTEFCRUxcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkxhYmVsc1twYXJhbWV0ZXJzWzFdXSA9IHRoaXMuQ29kZS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIEdPVE8vQ0FMTC9TRVQgY29tbWFuZC5cclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIFBhcnNlQ29kZShwYXJhbWV0ZXJzOiBzdHJpbmdbXSk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLkNvZGUucHVzaChwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxufSJdfQ==
