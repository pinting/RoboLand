"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GroundCell_1 = require("./Element/Cell/GroundCell");
const Coord_1 = require("./Coord");
const Utils_1 = require("./Utils");
const CellFactory_1 = require("./Element/Cell/CellFactory");
const CellType_1 = require("./Element/Cell/CellType");
const BasicRobot_1 = require("./Element/Robot/BasicRobot");
class Map {
    constructor() {
        this.robotCount = 2;
        this.OnUpdate = Utils_1.Utils.Noop;
    }
    static GetInstance() {
        if (Map.instance == undefined) {
            return Map.instance = new Map();
        }
        return Map.instance;
    }
    Init(size) {
        this.size = size;
        this.robots = [];
        this.cells = [];
        for (var i = 0; i < size * size; i++) {
            let x = i % size;
            let y = Math.floor(i / size);
            this.cells[i] = new GroundCell_1.GroundCell(new Coord_1.Coord(x, y));
        }
        this.robots.push(new BasicRobot_1.BasicRobot(new Coord_1.Coord(Utils_1.Utils.Random(0, size - 1), 0)));
        this.robots.push(new BasicRobot_1.BasicRobot(new Coord_1.Coord(Utils_1.Utils.Random(0, size - 1), size - 1)));
        this.OnUpdate();
    }
    Load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            var raw;
            try {
                raw = JSON.parse(yield Utils_1.Utils.Get(url));
                if (raw == null && raw.length < 2 && raw.length != Math.pow(raw[0], 2) + 1) {
                    return;
                }
            }
            catch (e) {
                return;
            }
            this.cells = [];
            this.robots = [];
            this.size = raw.shift();
            var robotSpots = new Array();
            var robotCount = 0;
            for (let i = 0; i < raw.length; i++) {
                let x = i % this.size;
                let y = Math.floor(i / this.size);
                let type = raw[i];
                this.cells[i] = CellFactory_1.CellFactory.FromType(type, new Coord_1.Coord(x, y));
                if (robotCount < this.robotCount && type == CellType_1.CellType.Ground) {
                    if (Utils_1.Utils.Random(0, 20) == 1) {
                        this.robots.push(new BasicRobot_1.BasicRobot(new Coord_1.Coord(x, y)));
                        robotCount++;
                    }
                    else {
                        robotSpots.push(new Coord_1.Coord(x, y));
                    }
                }
            }
            for (; robotSpots.length > 0 && robotCount < this.robotCount; robotCount++) {
                let coord = robotSpots.splice(Utils_1.Utils.Random(0, robotSpots.length - 1), 1)[0];
                let robot = new BasicRobot_1.BasicRobot(coord);
                this.robots.push(robot);
            }
            this.OnUpdate();
        });
    }
    GetElement(form, coord) {
        var result = null;
        form.some(e => {
            if (e.GetPosition().Is(coord)) {
                result = e;
                return true;
            }
        });
        return result;
    }
    GetCell(coord) {
        return this.GetElement(this.cells, coord);
    }
    GetRobot(coord) {
        return this.GetElement(this.robots, coord);
    }
    RemoveRobot(robot) {
        var index = this.robots.indexOf(robot);
        if (index >= 0) {
            this.robots.splice(index, 1);
        }
    }
    GetSize() {
        return this.size;
    }
    GetCells() {
        return this.cells;
    }
    GetRobots() {
        return this.robots;
    }
    GetElements() {
        return this.cells.concat(this.robots);
    }
}
exports.Map = Map;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
