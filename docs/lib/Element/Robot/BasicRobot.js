"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Map_1 = require("../../Map");
const MoveType_1 = require("../MoveType");
class BasicRobot {
    constructor(position) {
        this.map = Map_1.Map.GetInstance();
        this.health = 1.0;
        this.damage = 1.0;
        this.position = position;
        var cell = Map_1.Map.GetInstance().GetCell(position);
        if (cell != null) {
            cell.MoveHere(this);
        }
    }
    GetTexture() {
        return "res/robot.png";
    }
    Move(direction) {
        if (Math.abs(Math.abs(direction.X) - Math.abs(direction.Y)) == 0) {
            return false;
        }
        var lastCell = this.map.GetCell(this.position);
        var nextCoord = this.position.Difference(direction);
        var nextCell = this.map.GetCell(nextCoord);
        if (lastCell == null || nextCell == null) {
            return false;
        }
        switch (nextCell.MoveHere(this)) {
            case MoveType_1.MoveType.Blocked:
                return false;
            case MoveType_1.MoveType.Killed:
                lastCell.MoveAway();
                this.position = nextCoord;
                this.Kill();
                return false;
            case MoveType_1.MoveType.Successed:
                lastCell.MoveAway();
                this.position = nextCoord;
                this.map.OnUpdate();
                return true;
        }
    }
    Attack(robot) {
        if (this.position.GetDistance(robot.GetPosition()) > 1) {
            return false;
        }
        robot.Damage(this.damage);
    }
    GetPosition() {
        return this.position;
    }
    Damage(damage) {
        this.health -= damage;
        if (this.health <= 0) {
            this.Kill();
        }
    }
    Kill() {
        this.health = 0;
        this.map.RemoveRobot(this);
        this.map.OnUpdate();
    }
    IsAlive() {
        return this.health > 0;
    }
}
exports.BasicRobot = BasicRobot;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93d3cvbGliL0VsZW1lbnQvUm9ib3QvQmFzaWNSb2JvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG1DQUFnQztBQUNoQywwQ0FBdUM7QUFFdkM7SUFhSSxZQUFtQixRQUFlO1FBWGYsUUFBRyxHQUFHLFNBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVqQyxXQUFNLEdBQVcsR0FBRyxDQUFDO1FBQ3JCLFdBQU0sR0FBVyxHQUFHLENBQUM7UUFVM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsSUFBSSxJQUFJLEdBQUcsU0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQyxFQUFFLENBQUEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQ2hCLENBQUM7WUFDRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUM7SUFDTCxDQUFDO0lBS00sVUFBVTtRQUViLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDM0IsQ0FBQztJQU1NLElBQUksQ0FBQyxTQUFnQjtRQUV4QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hFLENBQUM7WUFDRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFM0MsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLENBQ3hDLENBQUM7WUFDRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxNQUFNLENBQUEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQy9CLENBQUM7WUFDRyxLQUFLLG1CQUFRLENBQUMsT0FBTztnQkFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixLQUFLLG1CQUFRLENBQUMsTUFBTTtnQkFDaEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsS0FBSyxtQkFBUSxDQUFDLFNBQVM7Z0JBQ25CLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEIsQ0FBQztJQUNMLENBQUM7SUFNTSxNQUFNLENBQUMsS0FBYTtRQUV2QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDdEQsQ0FBQztZQUNHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFLTSxXQUFXO1FBRWQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQU1NLE1BQU0sQ0FBQyxNQUFjO1FBRXhCLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO1FBRXRCLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQ3BCLENBQUM7WUFDRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFLTyxJQUFJO1FBRVIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBS00sT0FBTztRQUVWLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUE1SEQsZ0NBNEhDIiwiZmlsZSI6Ind3dy9saWIvRWxlbWVudC9Sb2JvdC9CYXNpY1JvYm90LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVJvYm90IH0gZnJvbSBcIi4vSVJvYm90XCI7XHJcbmltcG9ydCB7IENvb3JkIH0gZnJvbSBcIi4uLy4uL0Nvb3JkXCI7XHJcbmltcG9ydCB7IE1hcCB9IGZyb20gXCIuLi8uLi9NYXBcIjtcclxuaW1wb3J0IHsgTW92ZVR5cGUgfSBmcm9tIFwiLi4vTW92ZVR5cGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNpY1JvYm90IGltcGxlbWVudHMgSVJvYm90XHJcbntcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBtYXAgPSBNYXAuR2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgaGVhbHRoOiBudW1iZXIgPSAxLjA7XHJcbiAgICBwcm90ZWN0ZWQgZGFtYWdlOiBudW1iZXIgPSAxLjA7XHJcblxyXG4gICAgcHJpdmF0ZSBwb3NpdGlvbjogQ29vcmQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgYSBuZXcgQmFzaWNSb2JvdC5cclxuICAgICAqIEBwYXJhbSBwb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocG9zaXRpb246IENvb3JkKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuXHJcbiAgICAgICAgdmFyIGNlbGwgPSBNYXAuR2V0SW5zdGFuY2UoKS5HZXRDZWxsKHBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgaWYoY2VsbCAhPSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2VsbC5Nb3ZlSGVyZSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGNlbGwgdGV4dHVyZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIEdldFRleHR1cmUoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFwicmVzL3JvYm90LnBuZ1wiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSByb2JvdCBpbiBhIGRpcmVjdGlvbi5cclxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIE1vdmUoZGlyZWN0aW9uOiBDb29yZCk6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICBpZihNYXRoLmFicyhNYXRoLmFicyhkaXJlY3Rpb24uWCkgLSBNYXRoLmFicyhkaXJlY3Rpb24uWSkpID09IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE9ubHkgYWxsb3cgbGVmdCwgcmlnaHQsIHRvcCBhbmQgYm90dG9tIG1vdmVtZW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbGFzdENlbGwgPSB0aGlzLm1hcC5HZXRDZWxsKHRoaXMucG9zaXRpb24pO1xyXG4gICAgICAgIHZhciBuZXh0Q29vcmQgPSB0aGlzLnBvc2l0aW9uLkRpZmZlcmVuY2UoZGlyZWN0aW9uKTtcclxuICAgICAgICB2YXIgbmV4dENlbGwgPSB0aGlzLm1hcC5HZXRDZWxsKG5leHRDb29yZCk7XHJcblxyXG4gICAgICAgIGlmKGxhc3RDZWxsID09IG51bGwgfHwgbmV4dENlbGwgPT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaChuZXh0Q2VsbC5Nb3ZlSGVyZSh0aGlzKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgTW92ZVR5cGUuQmxvY2tlZDogLy8gRG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBjYXNlIE1vdmVUeXBlLktpbGxlZDogLy8gTW92ZSBhd2F5IGFuZCBraWxsIGl0XHJcbiAgICAgICAgICAgICAgICBsYXN0Q2VsbC5Nb3ZlQXdheSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5leHRDb29yZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuS2lsbCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBjYXNlIE1vdmVUeXBlLlN1Y2Nlc3NlZDogLy8gTW92ZSBhd2F5XHJcbiAgICAgICAgICAgICAgICBsYXN0Q2VsbC5Nb3ZlQXdheSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5leHRDb29yZDtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwLk9uVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2sgYW4gb3RoZXIgcm9ib3QgaWYgaXQgaXMgb25lIGNlbGwgYXdheS5cclxuICAgICAqIEBwYXJhbSByb2JvdCBcclxuICAgICAqL1xyXG4gICAgcHVibGljIEF0dGFjayhyb2JvdDogSVJvYm90KTogYm9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMucG9zaXRpb24uR2V0RGlzdGFuY2Uocm9ib3QuR2V0UG9zaXRpb24oKSkgPiAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcm9ib3QuRGFtYWdlKHRoaXMuZGFtYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgcG9zaXRpb24gb2YgdGhlIHJvYm90LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgR2V0UG9zaXRpb24oKTogQ29vcmQgXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEbyBkYW1hZ2UgdG8gdGhpcyByb2JvdC5cclxuICAgICAqIEBwYXJhbSBkYW1hZ2UgQW1vdW50IG9mIHRoZSBkYW1hZ2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBEYW1hZ2UoZGFtYWdlOiBudW1iZXIpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5oZWFsdGggLT0gZGFtYWdlO1xyXG5cclxuICAgICAgICBpZih0aGlzLmhlYWx0aCA8PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5LaWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogS2lsbCB0aGUgcm9ib3QuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgS2lsbCgpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5oZWFsdGggPSAwO1xyXG5cclxuICAgICAgICB0aGlzLm1hcC5SZW1vdmVSb2JvdCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1hcC5PblVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIHJvYm90IGlzIGFsaXZlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgSXNBbGl2ZSgpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhbHRoID4gMDtcclxuICAgIH1cclxufSJdfQ==
