"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Processor_1 = require("./Interpreter/Processor");
const Runner_1 = require("./Interpreter/Runner");
const Map_1 = require("./Map");
const Coord_1 = require("./Coord");
const Utils_1 = require("./Utils");
Utils_1.Utils.Extract(window, { Coord: Coord_1.Coord, Map: Map_1.Map, Utils: Utils_1.Utils, Processor: Processor_1.Processor, Runner: Runner_1.Runner });
const canvas = document.getElementById("canvas");
const context = canvas.getContext("2d");
const codeTextarea = document.getElementById("code");
const pushButton = document.getElementById("push");
const stopButton = document.getElementById("stop");
let map = Map_1.Map.GetInstance();
let runner = null;
const last = [];
let player = null;
let enemy = null;
const size = 30;
const draw = (e, loaded) => {
    let coord = e.GetPosition();
    let x = coord.X;
    let y = coord.Y;
    let image = new Image();
    image.onload = () => {
        context.drawImage(image, x * size, y * size, size, size);
        loaded();
    };
    image.src = e.GetTexture();
};
const update = () => {
    if (!runner) {
        player = map.GetRobots()[0];
        enemy = map.GetRobots()[1];
        runner = new Runner_1.Runner(player);
        canvas.width = size * map.GetSize();
        canvas.height = size * map.GetSize();
        canvas.onclick = e => update();
        let i = 0;
        map.GetCells().forEach(cell => {
            draw(cell, () => {
                if (++i == map.GetSize()) {
                    map.GetRobots().forEach(robot => {
                        last.push(robot.GetPosition().Clone());
                        draw(robot, Utils_1.Utils.Noop);
                    });
                }
            });
        });
    }
    else {
        let i = 0;
        last.forEach(c => {
            draw(map.GetCell(c), Utils_1.Utils.Noop);
            if (++i == last.length) {
                last.length = 0;
                map.GetRobots().forEach(robot => {
                    last.push(robot.GetPosition().Clone());
                    draw(robot, Utils_1.Utils.Noop);
                });
            }
        });
    }
    if (!player.IsAlive() || !enemy.IsAlive()) {
        alert(player.IsAlive() ? "You won!" : "You lose!");
        stopButton.disabled = true;
        pushButton.disabled = true;
        runner.Stop();
    }
};
pushButton.onclick = e => runner.Run(codeTextarea.value);
stopButton.onclick = e => runner.Stop();
Utils_1.Utils.Get("res/example.txt").then(result => codeTextarea.value = result);
map.Load("res/map.json");
map.OnUpdate = update;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
